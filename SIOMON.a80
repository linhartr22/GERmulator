;*****
;* Equates
;*
NUL         EQU     $00 
BEL         EQU     $07 
BS          EQU     $08 
HT          EQU     $09 
LF          EQU     $0A 
FF          EQU     $0C 
CR          EQU     $0D 
ESC         EQU     $1B 
; 
SIODATA     EQU     $80 
; 
SIOST       EQU     $81 
SIOSTTXRDY  EQU     $01 
SIOSTRXRDY  EQU     $02 
SIOSTTXE    EQU     $04 
; 
SIOMO       EQU     $81 
SIOMOS1     EQU     $40 
SIOMOS15    EQU     $80 
SIOMOS2     EQU     $C0 
SIOMOPE     EQU     $20 
SIOMOPEN    EQU     $10 
SIOMOC5     EQU     $00 
SIOMOC6     EQU     $04 
SIOMOC7     EQU     $08 
SIOMOC8     EQU     $0C 
SIOMOBS     EQU     $00 
SIOMOB1X    EQU     $01 
SIOMOB16X   EQU     $02 
SIOMOB64X   EQU     $03 
SIOMOI      EQU     siomos1+siomoc8+siomob16x 
; 
SIOCMD      EQU     $81 
SIOCMDTXEN  EQU     $01 
SIOCMDDTR   EQU     $02 
SIOCMDRXEN  EQU     $04 
SIOCMDER    EQU     $10 
SIOCMDRTS   EQU     $20 
SIOCMDIR    EQU     $40 
SIOCMDI     EQU     siocmddtr+siocmdrts+siocmdtxen+siocmder 
; 
;*****
;* IRQ Vectors
;*
            .ORG    $0000 
            JMP     init ; RST 0, RESET
            .ORG    $0008 
            JMP     init ; RST 1
            .ORG    $0010 
            JMP     init ; RST 2
            .ORG    $0018 
            JMP     init ; RST 3
            .ORG    $0020 
            JMP     init ; RST 4
            .ORG    $0028 
            JMP     init ; RST 5
            .ORG    $0030 
            JMP     init ; RST 6
            .ORG    $0038 
            JMP     init ; RST 7
; 
;*****
;* Init
;*
            .ORG    $0100 

INIT:       LXI     sp,spinit ; Init SP

SIOINIT:    SUB     a ; Clear SIO Init Sequence
            OUT     siomo 
            OUT     siomo 
            OUT     siomo 
            MVI     a,siocmdir ; Send SIO Command Internal Reset
            OUT     siocmd 
            MVI     a,siomoi ; Send SIO Mode Instruction
            OUT     siomo 
            MVI     a,siocmdi ; Send SIO Command Instruction
            OUT     siocmd 

MONINIT:    LXI     h,grtmsg ; Display Greet Message
            CALL    soutstr 
; 
;*****
;* Main
;*
MAIN:       LXI     h,clmsg ; Display Prompt
            CALL    soutstr 
            LXI     h,clbuf ; Get SIO Command Line Buffer Pointer
            LXI     b,clbufe-clbuf ; Get SIO Command Line Buffer Size (Zeros B - Size in C)
            CALL    sinstr ; Get SIO Command Line Buffer
PARSE:      MOV     a,m ; Get First Character
            INX     h ; Inc Buffer Pointer
            CPI     '?' 
            JZ      help ; Display Help
            CPI     'D' 
            JZ      dump 
            CPI     'E' 
            JZ      edit 
            CPI     'G' 
            JZ      goto 
; 
;*****
;* Error
;*
ERROR:      LXI     h,errmsg ; Display Error
            CALL    soutstr 
            JMP     main ; Next Command
; 
;*****
;* Help
;*
HELP:       LXI     h,hlpmsg ; Display Help
            CALL    soutstr 
            JMP     main ; Next Command
; 
;*****
;* Dump
;* HL = Command Line Buffer
;*
DUMP:       CALL    s2w ; Get Dump Begin Address
            JZ      error ; No Digits Found
            MVI     a,$0F0 ; Start on 16 Byte Boundry
            ANA     e 
            MOV     e,a 
            XCHG     ; Save Dump Begin Address
            SHLD    addrbeg 
            XCHG     ; Restore Buffer Pointer
            CALL    s2w ; Get Dump End Address
            JZ      error ; No Digits Found
            MVI     a,$0F ; End on 16 Byte Boundry
            ORA     e 
            MOV     e,a 
            XCHG     ; Save Dump End Address
            SHLD    addrend 
            LXI     h,dumphd ; Display Dump Header
            CALL    soutstr 
DUMPNL:     LHLD    addrbeg ; Get Address Pointer
            MOV     a,h ; Display Address High Byte
            CALL    southexb 
            MOV     a,l ; Display Address Low Byte
            CALL    southexb 
            MVI     a,' ' ; Display Space
            CALL    soutc 
            MVI     b,16 ; Display 16 Bytes
DUMPBT:     MOV     a,m ; Get Byte
            INX     h ; Inc Address Pointer
            CALL    southexb ; Display Byte
            MVI     a,' ' ; Display Space
            CALL    soutc 
            DCR     b ; Display Another Byte?
            JNZ     dumpbt ; Yes
            LHLD    addrbeg ; Get Address Pointer
            MVI     b,16 ; Display 16 Characters
DUMPCH:     MOV     a,m ; Get Character
            INX     h ; Inc Address Pointer
            CPI     ' ' ; Printable Character?
            JC      dumpch1 ; No
            CPI     $80 
            JC      dumpch2 ; Yes
DUMPCH1:    MVI     a,'.' ; Non-Printable Character
DUMPCH2:    CALL    soutc ; Display Character
            DCR     b ; Display Another Character?
            JNZ     dumpch ; Yes
            CALL    soutcrlf ; Display CRLF
            SHLD    addrbeg ; Save Dump Begin Address
            XCHG     
            LHLD    addrend ; Get Dump End Address
            CALL    cmphlde ; Dump End >= Dump Begin
            JNC     dumpnl ; Yes, Dump Next Line
            JMP     main ; No, Next Command
; 
;*****
;* Edit
;* HL = Command Line Buffer
;*
EDIT:       CALL    s2w ; Get Edit Address
            JZ      error ; No Digits Found
            XCHG     ; Save Edit Address
            SHLD    addrbeg 
EDITNL:     MOV     a,h ; Display Address High Byte
            CALL    southexb 
            MOV     a,l ; Display Address Low Byte
            CALL    southexb 
            MVI     a,' ' ; Display Space
            CALL    soutc 
            MOV     a,m ; Display Current Byte
            CALL    southexb 
            MVI     a,'-' ; Display Prompt
            CALL    soutc 
            LXI     h,clbuf ; Get SIO Command Line Buffer Pointer
            LXI     b,2 ; Get SIO Command Line Buffer Size (Zeros B - Size in C)
            CALL    sinstr ; Get SIO Command Line Buffer
            CALL    s2w ; Get New Byte
            JZ      editcmd ; No Digits Found
            LHLD    addrbeg ; Get Edit Address
            MOV     m,e ; Save New Byte
EDITNL1:    LHLD    addrbeg ; Get Edit Address
            INX     h 
            SHLD    addrbeg 
            JMP     editnl ; Get Next Edit
EDITCMD:    LDA     clbuf ; Get Command Line Character
            ORA     a ; No Change?
            JZ      editnl1 ; Yes, No Change
            CPI     '.' ; Exit?
            JZ      main ; Yes, Next Command
            CPI     '?' ; Help?
            JZ      help ; Yes
            LXI     h,clmsg ; Display Error Message
            CALL    soutstr 
            CALL    soutcrlf 
            LHLD    addrbeg ; Get Edit Address
            JMP     editnl1 ; Try Again
; 
;*****
;* GoTo
;* HL = Command Line Buffer
;*
GOTO:       CALL    s2w ; Get GoTo Address
            JZ      error ; No Digits Found
            PUSH    d ; Jump to GoTo Address
            RET      
; 
;*****
;= Library
;=
            .ORG    $1800 
; 
;=====
;= Serial Output Character in Acc
;= Modifies: None
SOUTC:      PUSH    psw ; Save Char
            IN      siost ; SIO Ready to Tx?
            ANI     siosttxe 
            JZ      soutc ; No, Keep Waiting
            POP     psw ; Restore Char
            OUT     siodata ; Output Char to SID Data Port
            RET      ; Done
; 
;=====
;= Serial Output String at HL, Null terminated
;= Modifies: AF, HL
SOUTSTR:    MOV     a,m ; Get Char from Buffer
            ORA     a ; Null?
            RZ      soutstrx ; Yes, Exit
            CALL    soutc ; No, Serial Output Char
            INX     h ; Inc Buffer Pointer
            JMP     soutstr ; Get Next Char
; 
;=====
;= Serial Output Hex Byte in Acc
;= Modifies AF
SOUTHEXB:   PUSH    psw ; Save Byte
            RRC      ; Get Upper Nibble
            RRC      
            RRC      
            RRC      
            ANI     $0F ; Mask off Upper Nibble
            ADI     '0' ; Convert to ASCII
            CPI     ':' ; Hex Adjust?
            JC      southexb1 ; No
            ADI     'A'-':' ; Yes
SOUTHEXB1:  CALL    soutc ; Serial Output Char
            POP     psw ; Restore Char
            ANI     $0F ; Mask off Upper Nibble
            ADI     '0' ; Convert to ASCII
            CPI     ':' ; Hex Adjust?
            JC      southexb2 ; No
            ADI     'A'-':' ; Yes
SOUTHEXB2:  JMP     soutc ; Serial Output Char
; 
;=====
;= Serial Input String at HL, B=Count, C=Length
;= Before calling, set B to 0 when setting C to Length
;= Modifies AF, BC, DE, HL
SINSTR:     PUSH    h ; Save Registers
            PUSH    b 
            MVI     a,siocmdi+siocmdrxen ; Set SIO RX Enable
            OUT     siocmd 
SINSTRCB:   MVI     m,0 ; Clear Buffer
            DCR     c 
            JNZ     sinstrcb 
            POP     b ; Restore B=Count, C=Length
            POP     h ; Restore Buffer Pointer
            PUSH    h ; Save Buffer Pointer
SINSTRGC:   CALL    sinc ; Get Character
            MOV     d,a ; Save Character
            CPI     cr ; Carriage Return?
            JZ      sinstrx ; Yes, Exit
            CPI     bs ; Backspace?
            JZ      sinstrbs ; Yes, Backspace
            CPI     ' ' ; Printable Character?
            JC      sinstrgc ; No, Ignore Character
            MOV     a,b ; Character Counter = Buffer Size?
            CMP     c 
            JZ      sinstrgc ; Yes, Ignore Character
            MOV     a,d ; Restore Character
            MOV     m,a ; No, Save Character in Buffer
            INX     h ; Inc Buffer Pointer
            INR     b ; Inc Buffer Count
SINSTRECHO: CALL    soutc ; Echo Character
            JMP     sinstrgc ; Get Next Character
SINSTRBS:   MOV     a,b ; Count = 0?
            ORA     a 
            JZ      sinstr ; Yes, Ignore Backspace
            DCX     h ; Dec Buffer Pointer
            DCR     b ; Dec Character Count
            MVI     m,' ' ; Erase Character in Buffer
            MOV     a,d ; Restore Backspace Character
            JMP     sinstrecho ; Echo Backspace Character
SINSTRX:    MVI     m,nul ; Null Terminate Buffer
            CALL    soutcrlf ; Send CRLF
            MVI     a,siocmdi ; Clear SIO RX Enable
            OUT     siocmd 
            POP     h ; Restore Buffer Pointer
            JMP     str2upr ; Convert to Upper Case
; 
;=====
;= Serial Input Character to Acc
;= Modifies AF
SINC:       IN      siost ; Character Ready?
            ANI     siostrxrdy 
            JZ      sinc ; No, Keep Waiting
            IN      siodata ; Input Character
            ANI     $7F ; Make 7-bit ASCII
            RET      
; 
;=====
;= String at HL to Upper Case
;= Modifies AF
STR2UPR:    PUSH    h ; Save String Pointer
STR2UPRN:   MOV     a,m ; Character = Null?
            ORA     a 
            JZ      str2uprx ; Yes, Exit
            CPI     'a'-1 ; Character Lower Case?
            JC      str2upr1 ; No
            CPI     'z'+1 
            JNC     str2upr1 ; No
            MVI     a,0-('a'-'A') ; Yes, Make Upper Case
            ADD     m 
            MOV     m,a 
STR2UPR1:   INX     h ; Inc Pointer
            JMP     str2uprn ; Check Next Character
STR2UPRX:   POP     h ; Restore String Pointer
            RET      
; 
;=====
;= Parse Word to DE from String at HL
;= Returns HL Pointing to Next Non-Digit Character
;= Returns Z Digit Found Flag
;= Modifies HL, DE, BC, AF
S2W:        LXI     d,0 ; Clear Word
            MOV     c,e ; Clear Digit Found Flag
S2WNC:      MOV     a,m ; Get Character
            ORA     a ; Character = Nul?
            JZ      s2wx ; Yes, Exit
            SUI     '0' ; Character < 0?
            JC      s2wdel ; Yes, Process Delimeter
            CPI     9+1 ; Character <= 9?
            JC      s2wdig ; Yes, Process Digit
            CPI     'A'-'0' ; Character < A?
            JC      s2wdel ; Yes, Process Delimeter
            SUI     'A'-'9'-1 ; Character <= F?
            CPI     16 
            JNC     s2wdel ; No, Process Delimeter
S2WDIG:     MVI     c,-1 ; Set Digit Found Flag
            PUSH    psw ; Save Digit
            MVI     b,4 ; Shift DE Left 4 Bits
S2WDIG1:    ORA     a ; Clear Carry
            MOV     a,e 
            RAL      
            MOV     e,a 
            MOV     a,d 
            RAL      
            MOV     d,a 
            DCR     b ; Again?
            JNZ     s2wdig1 ; Yes
            POP     psw ; Restore Digit
            ORA     e ; Save Digit
            MOV     e,a 
S2WINC:     INX     h ; Inc String Pointer
            JMP     s2wnc ; Process Next Character
S2WDEL:     MOV     a,c ; Digit Found?
            ORA     a 
            JZ      s2winc ; No, Keep Looking
S2WX:       MOV     a,c ; Set Z to Digit Found Flag
            ORA     a 
            RET      
; 
;=====
;* Serial Output CRLF
;* Modifies AF
SOUTCRLF:   MVI     A,cr ; Display CR
            CALL    SOUTC 
            MVI     a,lf ; Display LF
            JMP     soutc 
; 
;=====
;* Compare HL to DE
;* Modifies AF
CMPHLDE:    MOV     a,l ; Subtract DE from HL
            SUB     e 
            MOV     a,h 
            SBB     d 
            RET      
; 
;*****
;* String Constants
;*
            .ORG    1E00H 

GRTMSG:     DB      cr,lf,lf,'GERmon v1.0',bel 
            DB      '   Roger D. Linhart',bel 
            DB      '   Nov 2018',bel,cr,lf,lf 
            DB      nul 
CLMSG:      DB      '? ' 
            DB      nul 
ERRMSG:     DB      'Error  (? for HELP)',cr,lf 
            DB      nul 
HLPMSG:     DB      cr,lf 
            DB      'Commands',cr,lf 
            DB      '========',cr,lf 
            DB      'D bbbb eeee <enter>  Display Memory',cr,lf 
            DB      'E aaaa <enter>       Edit Memory',cr,lf 
            DB      '                     <enter> No Change',cr,lf 
            DB      '                     <.> Exit',cr,lf 
            DB      'G aaaa <enter>       GoTo (Execute) Memory',cr,lf 
            DB      nul 
DUMPHD:     DB      '     00 01 02 03 04 05 06 07 08 ' 
            DB      '09 0A 0B 0C 0D 0E 0F ' 
            DB      '0123456789ABCDEF',cr,lf 
            DB      nul 
; 
;*****
;* RAM
;*
            .ORG    8000h 

CLBUF:      DS      12 ; Command Line Buffer (String - Null Delimited)
CLBUFE:     DB      0 ; Command Line Buffer End and Space for Null Delimeter
ADDRBEG:    DW      0 ; Address Begin
ADDREND:    DW      0 ; Address End
; 
;*****
;* STACK
;*
            .ORG    0FE00h 

            DS      100h 
SPINIT      EQU     $ 







































